%% Scale Map twice, and convert pfarc into scen
clear all
map_pairs = [
    %     "dao", "arena";
    %         "bg512", "AR0709SR";
    %         "bg512", "AR0504SR";
    %         "bg512", "AR0014SR";
    %         "bg512", "AR0304SR";
    %         "bg512", "AR0702SR";
    %         "bg512", "AR0205SR";
    %         "bg512", "AR0602SR";
    %         "bg512", "AR0603SR";
    %         "street", "Denver_2_1024";
    %         "street", "NewYork_0_1024";
    %         "street", "Shanghai_2_1024";
    %         "street", "Shanghai_0_1024";
    %         "street", "Sydney_1_1024";
    %     "da2", "ht_mansion2b"
    %     "da2", "ht_0_hightown"
    "da2", "ca_caverns1"
    %     "dao", "hrt201n"
    %     "room", "32room_000"
    %     "room", "16room_000"
    ];
sc = 2;

for p = 1:size(map_pairs, 1)
    % convert map to two times
    f_dir = map_pairs(p, 1);
    f_name = map_pairs(p, 2);
    f_pfarc = fullfile("..","rayscan","scenarios", f_dir, f_name + ".pfarc");
    fprintf(" pfarc\t%s\n", f_pfarc);
    f_scen = fullfile("data", f_dir, f_name + "_scale2.map.scen");
    fprintf("  scen\t%s\n", f_scen);
    f_mapname =  f_name + "_scale2.map";
    f_mapold = fullfile("data", f_dir, f_name + ".map");
    fprintf("mapold\t%s\n", f_mapold);
    f_map = fullfile("data", f_dir, f_mapname);
    fprintf("mapnew\t%s\n", f_map);

    % extract mp data
    if (~isfile(f_mapold))
        fprintf("Map File %s does not exist. \n", f_map);
        continue;
    else
        fid_mapold = fopen(f_mapold,'r');
        fid_map = fopen(f_map, "w");
        map_size = fscanf(fid_mapold, "type octile\nheight %d\nwidth %d\nmap\n");
        fprintf(fid_map, "type octile\nheight %d\nwidth %d\nmap\n", map_size(1)*sc, map_size(2)*sc);

        for i = 1:map_size(1)
            mp_line = fscanf(fid_mapold, "%1s", [map_size(2), 1]);
            mp_sc = repelem(mp_line, sc);
            for s = 1:sc
                fprintf(fid_map, "%s\n", mp_sc);
            end
        end
        fclose(fid_mapold);
    end

    % convert pfarc to scens
    map_size = map_size * sc;
    if (~isfile(f_pfarc))
        fprintf("File %s does not exist. \n", f_pfarc);
        continue;
    else
        lines_pfarc = readlines(f_pfarc);
        fid_scen = fopen(f_scen, "w");
        fprintf(fid_scen, "version 1\n");
        for i=1:numel(lines_pfarc)
            l = split(lines_pfarc(i), " ");
            if (l(1) == "instance")
                si = l(3);
                sj = map_size(1) - str2double(l(4));
                ti = l(6);
                tj = map_size(1) - str2double(l(7));
                cost = l(9);
                fprintf(fid_scen, "0\t%s\t%d\t%d\t%s\t%d\t%s\t%d\t%s\n", f_mapname, map_size(1), map_size(2), si, sj, ti, tj, cost);
            end
        end

    end
    disp("---");
end

%% start the map and plot the path
clear all, close all
disp('---');

scen = 2778;
algo = 'VG2';

% map_pair = ["sc1/", "Aftershock"];
% map_pair = ["sc1/", "Aurora"];
% map_pair = ["sc1/", "Aurora2"];
% map_pair = ["sc1/", "ArcticStation"];
% map_pair = ["maze/", "maze512-32-0"];
% map_pair = ["maze/", "maze512-16-0"];
% map_pair = ["maze/", "maze512-4-0"];
% map_pair = ["maze/", "maze512-8-2"];
% map_pair = ["maze/", "maze512-8-7"];
% map_pair = ["maze/", "maze512-4-2"];
% map_pair = ["maze/", "maze512-2-0"];

% map_pair = ["random/", "random512-10-0"];
% map_pair = ["random/", "random512-20-1"];
% map_pair = ["random/", "random512-20-0"];
% map_pair = ["random/", "random512-30-0"];
% map_pair = ["random/", "random512-40-0"];
% map_pair = ["street/", "London_0_1024"];
map_pair = ["street/", "Denver_0_1024"];
% map_pair = ["dao/", "lak100c"];

% path = [cd /
% ];

results_dpath = "results/" + map_pair(1);
results_fpath = algo + "_" + map_pair(2) + ".B.results";
path = getPathFromScen(results_dpath + results_fpath, scen);

% mp_name = 'Berlin_2_1024';
% mp_name = 'Boston_2_1024';
% mp_name = 'Denver_2_1024';
% mp_name = 'London_2_1024';
% mp_name = 'Milan_2_1024';
% mp_name = 'Moscow_2_1024';
% mp_name = 'NewYork_2_1024';
% mp_name = 'Paris_2_1024';
% mp_name = 'Paris_0_256';
% mp_name = 'Shanghai_2_1024';
% mp_name = 'Sydney_2_1024';
% mp_name = 'ht_mansion2b';
% mp_name = 'ca_cave';
% mp_name = 'ca_cavern1_haunted';
% mp_name = 'lt_0_lowtown_a3_n_c';
% mp_name = 'w_blightlands';
% mp_name = 'w_woundedcoast';
% mp_name = 'ca_caverns1';
% mp_name = 'ca_caverns2prc';
% mp_name = 'ca_caverns2';
% mp_name = 'maze512-16-0';
% mp_name = 'battleground';
% mp_name = 'Aurora';
% mp_name = 'Aftershock';
% mp_name = 'ArcticStation';
% mp_name = 'maze512-1-0';
% mp_name = 'random512-30-0';
% mp_name = 'random512-40-0';
% mp_name = 'arena2';
% mp_name = '8room_000';

% % get latest file
% d= dir('results/*txt');
% dd = zeros(length(d), 1);
% for j = 1:length(d)
%   dd(j) = datenum(d(j).date);
% end
% [~, i] = max(dd);
%%
tmp = [98,269; 99,270; 100,271; 101,272; 102,273; 103,275; 107,275; 128,275; 129,281; 130,275; 131,267; 144,273; 146,268; 146,270; 147,259; 147,263; 147,267; 147,271; 151,259; 151,267; 151,271; 155,259; 155,267; 155,273; 157,273; 159,259; 159,271; 159,281; 159,283; 159,295; 159,299; 160,310; 160,312; 160,313; 161,310; 161,311; 161,321; 161,353; 161,361; 162,309; 163,259; 163,299; 163,309; 164,294; 164,310; 165,293; 165,310; 166,292; 167,259; 167,310; 168,313; 169,221; 169,224; 169,291; 169,314; 169,315; 169,317; 169,334; 170,225; 170,230; 170,264; 170,266; 170,290; 170,314; 170,315; 170,317; 170,333; 171,231; 171,235; 171,239; 171,243; 171,247; 171,251; 171,255; 171,259; 171,316; 171,332; 172,218; 172,315; 172,321; 172,331; 173,314; 173,320; 173,330; 174,218; 174,313; 174,319; 174,329; 175,271; 175,283; 175,311; 175,318; 176,317; 177,225; 177,265; 177,275; 177,278; 177,316; 178,264; 178,277; 179,263; 179,275; 179,276; 179,283; 179,311; 180,262; 180,273; 180,275; 180,281; 181,227; 181,261; 181,272; 181,274; 181,280; 182,227; 182,260; 182,271; 182,273; 182,279; 183,227; 183,259; 183,270; 183,272; 183,278; 183,311; 184,258; 184,269; 184,271; 184,277; 185,229; 185,257; 185,268; 185,270; 185,276; 185,310; 185,318; 186,230; 186,256; 186,267; 186,269; 186,275; 186,289; 186,290; 186,291; 186,292; 186,309; 186,317; 186,348; 186,350; 187,266; 187,268; 187,287; 187,302; 187,308; 187,316; 187,326; 187,327; 187,335; 187,351; 187,355; 187,359; 187,363; 187,367; 188,231; 188,265; 188,267; 188,274; 188,285; 188,303; 188,307; 188,313; 188,315; 188,325; 189,264; 189,266; 189,282; 189,306; 189,312; 189,314; 189,323; 190,263; 190,265; 190,273; 190,305; 190,311; 190,313; 190,322; 191,255; 191,262; 191,263; 191,272; 191,279; 191,310; 191,311; 191,321; 191,343; 191,347; 191,351; 191,355; 191,359; 191,363; 191,367; 192,246; 192,249; 192,261; 192,271; 192,278; 192,309; 192,320; 192,329; 193,231; 193,233; 193,236; 193,260; 193,270; 193,308; 193,311; 193,320; 193,328; 194,316; 194,318; 195,259; 195,263; 195,269; 195,315; 197,268; 199,259; 199,263; 199,315; 199,319; 199,323; 199,327; 201,246; 201,249; 201,268; 201,278; 201,283; 201,285; 203,255; 203,259; 203,263; 203,267; 203,279; 203,315; 203,319; 204,280; 204,283; 204,285; 204,289; 204,304; 205,305; 206,307; 207,308; 208,309; 209,310; 210,236; 211,310; 213,310; 213,314; 214,281; 214,283; 214,285; 214,289; 214,311; 215,271; 215,275; 215,279; 215,291; 215,311; 215,315; 216,235; 216,311; 217,292; 217,311; 217,319; 218,140; 218,142; 218,234; 218,285; 218,293; 219,139; 219,143; 219,151; 219,167; 219,215; 219,219; 219,271; 219,275; 219,279; 219,283; 219,287; 219,294; 219,311; 219,315; 219,319; 220,137; 220,169; 220,289; 220,295; 220,297; 220,298; 221,136; 221,170; 221,210; 221,290; 221,301; 222,135; 222,171; 222,206; 222,291; 222,303; 222,319; 223,134; 223,143; 223,147; 223,151; 223,155; 223,159; 223,163; 223,172; 223,271; 223,275; 223,292; 223,305; 224,133; 224,149; 224,173; 224,293; 224,319; 225,132; 225,174; 225,276; 225,294; 225,320; 226,131; 226,174; 226,277; 226,297; 226,306; 226,321; 227,130; 227,163; 227,177; 227,178; 227,271; 227,278; 227,307; 227,322; 228,129; 228,142; 228,174; 228,176; 228,177; 228,273; 228,279; 228,297; 228,308; 228,323; 229,129; 229,141; 229,176; 229,274; 229,280; 229,298; 229,309; 229,324; 230,275; 230,281; 230,299; 230,310; 231,129; 231,176; 231,215; 231,219; 231,231; 231,235; 231,239; 231,243; 231,276; 231,300; 231,311; 231,315; 231,327; 232,125; 232,127; 232,128; 232,177; 232,221; 232,245; 232,277; 232,301; 233,124; 233,178; 233,249; 233,278; 233,292; 233,302; 234,182; 234,255; 234,293; 234,303; 234,316; 235,123; 235,141; 235,180; 235,181; 235,182; 235,215; 235,219; 235,223; 235,227; 235,231; 235,279; 235,283; 235,286; 235,294; 235,311; 235,318; 235,327; 236,141; 236,184; 236,295; 236,319; 237,296; 237,320; 238,184; 238,261; 238,267; 238,286; 238,297; 239,123; 239,141; 239,163; 239,203; 239,207; 239,211; 239,231; 239,287; 239,311; 239,327; 240,142; 240,268; 240,289; 240,303; 240,322; 241,292; 242,149; 242,322; 243,119; 243,123; 243,143; 243,147; 243,151; 243,163; 243,211; 243,231; 243,295; 243,299; 243,303; 243,315; 243,327; 244,153; 244,161; 244,275; 244,304; 244,307; 244,309; 244,313; 244,330; 245,276; 245,334; 246,181; 246,331; 246,333; 247,231; 247,334; 248,180; 249,118; 249,334; 250,112; 250,230; 250,278; 251,109; 251,279; 251,335; 251,339; 251,343; 252,108; 252,280; 252,347; 253,107; 253,281; 254,153; 254,162; 254,180; 254,305; 254,307; 254,309; 254,313; 254,348; 255,143; 255,163; 255,211; 255,230; 255,283; 255,303; 255,319; 255,323; 256,167; 256,181; 256,349; 257,168; 257,307; 257,309; 258,169; 258,182; 258,313; 259,27; 259,39; 259,51; 259,55; 259,59; 259,87; 259,143; 259,203; 259,207; 259,211; 259,231; 259,283; 259,303; 259,319; 259,323; 259,351; 260,129; 260,131; 260,169; 260,183; 261,127; 261,184; 262,126; 262,139; 262,185; 263,3; 263,72; 263,74; 263,80; 263,82; 263,87; 263,124; 263,143; 263,203; 263,207; 263,211; 263,325; 263,343; 263,347; 263,351; 264,140; 264,142; 264,326; 264,348; 264,350; 265,306; 265,327; 266,106; 266,205; 266,328; 267,87; 267,91; 267,186; 267,203; 267,207; 267,211; 267,330; 267,343; 268,168; 268,193; 268,201; 268,232; 268,331; 269,332; 270,232; 270,340; 271,231; 271,303; 271,307; 271,308; 271,310; 271,319; 271,335; 272,229; 272,283; 273,124; 274,13; 274,23; 274,229; 274,286; 274,299; 275,14; 275,22; 275,125; 275,231; 275,297; 276,296; 278,193; 278,202; 278,286; 279,87; 279,89; 279,127; 279,168; 279,191; 279,203; 279,207; 279,211; 279,285; 279,295; 280,106; 280,169; 280,205; 280,283; 281,231; 281,282; 282,132; 282,186; 282,301; 282,317; 282,333; 282,367; 283,72; 283,74; 283,80; 283,82; 283,87; 283,127; 283,131; 283,185; 283,203; 283,207; 283,230; 283,295; 283,299; 283,311; 283,315; 283,327; 283,331; 283,335; 283,339; 283,343; 283,347; 283,351; 283,355; 283,359; 283,366; 283,369; 284,184; 284,370; 285,210; 285,211; 285,212; 285,230; 285,372; 286,211; 286,212; 286,231; 286,281; 287,3; 287,23; 287,27; 287,41; 287,51; 287,55; 287,59; 287,87; 287,203; 287,212; 287,213; 287,282; 288,212; 288,213; 288,214; 288,236; 288,282; 289,204; 289,281; 290,107; 290,134; 290,169; 290,205; 290,213; 290,214; 290,215; 290,280; 291,108; 291,151; 291,168; 291,206; 291,239; 291,243; 291,279; 292,109; 292,136; 292,143; 292,152; 292,161; 292,207; 292,278; 293,111; 293,208; 293,277; 293,297; 293,364; 294,112; 294,209; 294,213; 294,365; 295,183; 295,211; 295,222; 295,366; 296,368; 297,370; 298,113; 298,225; 298,226; 298,227; 298,371; 299,115; 299,183; 299,228; 299,229; 299,276; 299,372; 300,230; 300,275; 300,376; 302,153; 302,161; 303,127; 303,131; 303,143; 303,147; 303,163; 303,230; 303,231; 303,235; 303,247; 303,272; 303,295; 304,149; 305,236; 305,246; 306,272; 307,131; 307,143; 307,147; 307,151; 307,163; 307,295; 308,130; 308,184; 309,272; 310,130; 310,184; 310,273; 310,296; 311,131; 311,135; 311,139; 311,179; 311,274; 312,176; 312,275; 313,152; 313,246; 313,276; 313,299; 314,236; 314,277; 314,285; 314,289; 315,139; 315,166; 315,175; 315,280; 315,281; 315,290; 316,152; 316,167; 316,174; 316,248; 316,280; 316,281; 316,304; 317,168; 317,173; 317,279; 317,281; 317,291; 318,248; 318,304; 319,159; 319,235; 319,247; 320,140; 321,143; 321,292; 322,145; 323,147; 323,159; 323,236; 323,247; 323,251; 323,263; 324,147; 324,264; 325,146; 325,293; 326,145; 326,147; 326,149; 326,153; 326,264; 327,144; 327,145; 327,247; 327,251; 327,255; 327,259; 327,263; 327,303; 328,236; 329,235; 330,234; 330,297; 331,233; 331,247; 331,251; 331,255; 331,259; 331,263; 331,267; 331,303; 331,307; 331,311; 332,232; 333,231; 334,230; 334,298; 335,229; 335,259; 335,299; 335,307; 335,311; 336,228; 337,227; 338,226; 339,225; 339,259; 339,307; 339,311; 340,224; 341,304; 342,223; 343,222; 343,255; 343,259; 343,263; 343,267; 343,271; 343,303; 343,307; 343,311; 344,221; 345,220; 346,248; 346,250; 347,219; 347,255; 347,259; 347,271; 347,283; 347,295; 347,299; 347,303; 347,307; 347,311; 348,272; 348,281; 348,344; 349,345; 350,346; 351,219; 351,311; 351,347; 352,348; 353,344; 354,342; 355,219; 355,292; 355,300; 355,311; 355,351; 358,273; 358,281; 358,301; 359,219; 359,255; 359,259; 359,271; 359,283; 359,287; 359,291; 359,292; 359,311; 359,351; 360,248; 360,250; 360,301; 360,310; 361,301; 361,342; 362,341; 363,211; 363,215; 363,219; 363,255; 363,259; 363,263; 363,267; 363,271; 363,302; 363,310; 363,315; 363,327; 363,339; 363,351; 363,355; 364,272; 364,356; 365,302; 365,310; 365,313; 366,272; 366,301; 366,335; 367,215; 367,259; 367,267; 367,301; 367,334; 368,234; 368,266; 368,302; 368,333; 368,359; 369,265; 369,302; 369,310; 369,328; 369,332; 369,360; 369,374; 370,234; 370,264; 371,215; 371,219; 371,259; 371,263; 371,299; 371,311; 372,210; 372,262; 372,330; 372,376; 374,210; 374,330; 374,376; 375,211; 375,215; 375,219; 375,231; 375,235; 375,239; 375,243; 375,247; 375,251; 375,255; 375,259; 375,311; 375,334; 375,372; 377,315; 377,317; 378,261; 379,243; 379,247; 379,251; 379,255; 379,259; 379,260; 379,311; 379,323; 379,327; 379,334; 379,372; 379,379; 380,259; 381,258; 381,386; 382,257; 383,243; 383,247; 383,251; 383,255; 384,244; 384,246; 384,252; 384,254; 386,355; 386,357; 387,354; 387,389; 388,352; 388,358; 388,382; 389,351; 389,359; 390,349; 390,361; 391,306; 391,347; 391,363; 391,382; 392,364; 393,346; 393,365; 394,366; 395,316; 395,325; 395,333; 395,383; 396,318; 397,319; 397,346; 398,366; 399,320; 399,334; 399,347; 399,365; 399,380; 400,364; 401,348; 401,363; 402,349; 402,380; 403,334; 403,350; 403,362; 403,383; 404,351; 404,361; 405,352; 405,360; 406,353; 406,354; 406,355; 406,358; 407,331; 409,332; 410,333; 411,334; 412,335; 412,384; 413,336; 414,337; 414,339; 414,341; 414,384; 416,341; 419,339; 420,351; 420,355; 420,383; 421,360; 421,361; 421,376; 421,377; 421,381; 422,341; 422,360; 422,361; 422,376; 422,377; 422,378; 422,380; 423,349; 423,359; 423,363; 423,381; 424,372; 424,374; 426,341; 429,341; 429,348; ]
hold on
plot (tmp(:,1), tmp(:, 2), 'rx');
hold off
%%

% map_pair = ["dao/", "arena"];
map_pair = ["da2/", "lt_0_lowtown_a3_n_c"];
   
% plot image
M = parse_maps(strcat("data/", map_pair(1)), map_pair(2));
C = ~logical(reshape(M.mp, M.num_j, M.num_i));
C = double(C);
ih = imagesc(C, "XData", 0.5, "YData", 0.5);
set(gca,'YDir','normal')
hold on
rectangle('Position',[0 0 M.num_i M.num_j], 'Edgecolor', 'r')

axis on
grid on
h = gca;
h.XAxis.MinorTickValues = 0:(M.num_i);
h.XAxis.MinorTick = 'On';
h.YAxis.MinorTickValues = 0:(M.num_j);
h.YAxis.MinorTick = 'On';
h.XLabel.String = 'X';
h.YLabel.String = 'Y';
grid(gca, 'minor')
colormap('gray')
axis equal

% for data tips
hold on
cpath = fullfile("P2D", "scripts", "corners", strcat(map_pair(2), ".mat"));
[X,Y] = findCorners(M);
save(cpath, 'X', 'Y');
load(cpath, 'X', 'Y');
sh = scatter(X, Y);
sh.MarkerFaceColor = [0,0,0];
sh.MarkerFaceAlpha = 0.;
sh.MarkerEdgeAlpha = 0.;
hold off

%
%
% % plot path
% hold on
% plot(h, path(:,1), path(:,2), '-', 'Color', [0.5,0.5,0.5]);
% sp = size(path, 1);
% for i = 1:sp
%     plot(h, path(i, 1), path(i, 2), '.', 'MarkerSize', 10, 'Color', [0, (sp-i)/sp, i/sp])
% end
% title(strcat("[", map_pair(2), "] SCEN(" ,num2str(scen), ")"), "Interpreter","none");
% hold off
%
% % find limits to zoom into path
% zt = 10;
% xmax = max(path(:,1)) + zt;
% xmin = min(path(:,1)) - zt;
% ymax = max(path(:,2)) + zt;
% ymin = min(path(:,2)) - zt;

dx = xmax - xmin;
dy = ymax - ymin;
rx = 16;
ry = 9;
if dx/ dy > rx / ry
    cy = dx / rx * ry;
    ymin = ymin - cy/2;
    ymax = ymax + cy/2;
else
    cx = dy / ry * rx;
    xmin = xmin - cx/2;
    xmax = xmax + cx/2;
end
xlim([xmin, xmax])
ylim([ymin, ymax])


dcm = datacursormode(gcf);
dcm.Enable = 'off';
% dcm.SnapToDataVertex = 'off';
dcm.UpdateFcn = @displayCoordinates;
function txt = displayCoordinates(~,info)
x = info.Position(1);
y = info.Position(2);
txt = ['' num2str(x) ', ' num2str(y)];
end
function [X,Y] = findCorners(M)
X = [];
Y = [];

% find corners for all four corners
if ~M.mp(1)
    X = 0;
    Y = 0;
end
if ~M.mp(M.num_j)
    X = [X, 0];
    Y = [Y, M.num_j];
end
if ~M.mp((M.num_i-1)*M.num_j+1)
    X = [X, M.num_i];
    Y = [Y, 0];
end
if ~M.mp(M.num_i*M.num_j)
    X = [X, M.num_i];
    Y = [Y, M.num_j];
end

% find corners for map bounds
for j = 1:(M.num_j-1)
    if M.mp(j) ~= M.mp(j+1)
        X = [X, 0];
        Y = [Y, j];
    end
end
k = (M.num_i-1)*M.num_j;
for j = 1:(M.num_j-1)
    if M.mp(j+k) ~= M.mp(j+k+1)
        X = [X, M.num_i];
        Y = [Y, j];
    end
end
for i = 0:(M.num_i-2)
    if M.mp(i*M.num_j+1) ~= M.mp((i+1)*M.num_j+1)
        X = [X, i+1];
        Y = [Y, 0];
    end
end
for i = 1:(M.num_i-1)
    if M.mp(i*M.num_j) ~= M.mp((i+1)*M.num_j)
        X = [X, i];
        Y = [Y, M.num_j];
    end
end

% find corners for everywhere else
b = 1;
for i = 0:(M.num_i-2)
    for j = 0:(M.num_j-2)
        SE = M.mp(b);
        NE = M.mp(b + M.num_j);
        NW = M.mp(b + M.num_j + 1);
        SW = M.mp(b + 1);

        if ((SE == NW || SW == NE) && (NE ~= SE || NW ~= SW)) % corner
            X = [X, i+1];
            Y = [Y, j+1];
        end
        b = b + 1;
    end
    b = b + 1;
end

end
function M = parse_maps(directory, name, flat)

if nargin == 1
    fnames = dir(fullfile(directory, '/*.map'));
    fnames = {fnames.name};
    fnames = convertCharsToStrings(fnames);
    flat = true;
elseif nargin == 2
    fnames = convertCharsToStrings(name) + ".map";
    flat = true;
else
    fnames = convertCharsToStrings(name) + ".map";
end
M = [];
for f = 1:length(fnames)
    % extract mp data
    fname = fullfile(directory, fnames(f));
    if ~isfile(fname)
        fprintf("File %s does not exist.\n", fname);
        continue
    end
    fprintf("Opening %s\n", fname);
    fileID = fopen(fname,'r');
    ni = fscanf(fileID, "type octile\nheight %d\n");
    nj = fscanf(fileID, "width %d\nmap\n");
    % get mp
    mp_str = fscanf(fileID,"%1s",[nj, ni]);
    fclose(fileID);

    % convert mp to numeric format
    mp_str = mp_str';


    mp = zeros(ni, nj);
    for i = 1:ni
        for j = 1:nj
            s = mp_str(i, j);
            if s ~= '.'
                mp(i, j) = 1;
            end
        end
    end

    if flat == true
        mp = reshape(mp', 1, []);
    end

    % append to struct
    m = struct('num_i', ni, 'num_j', nj, ...
        'name', '', 'path', fname, 'mp', mp);
    [~, m.name, ~] = fileparts(fname);
    M = [M, m];
end
end

function path = getPathFromScen(fpath, scen)

path = [];

fid = fopen(fpath, 'r');
data = fread(fid, 'char');

% seek to after title and version number
dd = 0;
for d = 1:numel(data)
    if typecast(data(d), 'int8') == 0
        dd = d;
        fseek(fid, d, 'bof');
        break;
    end
end


data = fread(fid, 'int');

d = 0;
%     d = 0;
for (i = 1:(scen-1))
    %         d = d + 13;
    d = d + 1;
    while (data(d) ~= intmin)
        %             d = d + 2;
        d = d + 2;
    end
end

start = [data(d+1), data(d+2)];
goal = [data(d+3), data(d+4)];
dd = dd + (d + 4)*4;
d = d + 9;

while (data(d) ~= intmin)
    path = [path; data(d), data(d+1)];
    d = d + 2;
end

fseek(fid, dd, 'bof');
data = fread(fid, 'double');
path_cost = data(1);
path_time = data(2);

s = sprintf("%s\n\tScen %5d:  (%4d,%4d) to (%4d,%4d)  $( %.3f )  elapsed( %.3fus )\n\tPath{ ", fpath, scen, start(1), start(2), goal(1), goal(2), path_cost, path_time);
for i = 1:size(path, 1)
    s = s + sprintf("%4d,%4d;", path(i,1), path(i,2));
end
s = s + " }\n";
fprintf(s);

fclose(fid);
end

